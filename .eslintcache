[{"/home/chiaki_hagiwara/sample/src/index.js":"1","/home/chiaki_hagiwara/sample/src/components/calculateWinner..js":"2","/home/chiaki_hagiwara/sample/src/components/Board.tsx":"3","/home/chiaki_hagiwara/sample/src/components/square.tsx":"4","/home/chiaki_hagiwara/sample/src/components/ISquare.ts":"5","/home/chiaki_hagiwara/sample/src/components/game.tsx":"6"},{"size":232,"mtime":1609150183960,"results":"7","hashOfConfig":"8"},{"size":400,"mtime":1608627986200,"results":"9","hashOfConfig":"8"},{"size":989,"mtime":1609242032676,"results":"10","hashOfConfig":"8"},{"size":260,"mtime":1609237691605,"results":"11","hashOfConfig":"8"},{"size":90,"mtime":1608537368864,"results":"12","hashOfConfig":"8"},{"size":2138,"mtime":1609242204076,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"28mgsa",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/chiaki_hagiwara/sample/src/index.js",[],[],"/home/chiaki_hagiwara/sample/src/components/calculateWinner..js",["29","30"],"export default function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}","/home/chiaki_hagiwara/sample/src/components/Board.tsx",["31","32"],"/home/chiaki_hagiwara/sample/src/components/square.tsx",["33","34"],"/home/chiaki_hagiwara/sample/src/components/ISquare.ts",[],[],"/home/chiaki_hagiwara/sample/src/components/game.tsx",["35","36","37"],{"ruleId":"38","severity":1,"message":"39","line":1,"column":16,"nodeType":"40","messageId":"41","endLine":1,"endColumn":49},{"ruleId":"38","severity":1,"message":"42","line":1,"column":41,"nodeType":"43","messageId":"44","endLine":1,"endColumn":48},{"ruleId":"38","severity":1,"message":"39","line":11,"column":5,"nodeType":"45","messageId":"41","endLine":11,"endColumn":28},{"ruleId":"38","severity":1,"message":"39","line":19,"column":5,"nodeType":"45","messageId":"41","endLine":19,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":4,"column":10,"nodeType":"48","messageId":"49","endLine":4,"endColumn":13,"suggestions":"50"},{"ruleId":"38","severity":1,"message":"39","line":8,"column":1,"nodeType":"40","messageId":"41","endLine":8,"endColumn":36},{"ruleId":"38","severity":1,"message":"39","line":21,"column":3,"nodeType":"45","messageId":"41","endLine":21,"endColumn":25},{"ruleId":"38","severity":1,"message":"39","line":40,"column":5,"nodeType":"45","messageId":"41","endLine":40,"endColumn":25},{"ruleId":"38","severity":1,"message":"39","line":47,"column":3,"nodeType":"45","messageId":"41","endLine":47,"endColumn":11},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'squares' should be typed.","Identifier","missingArgType","FunctionExpression","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["51","52"],{"messageId":"53","fix":"54","desc":"55"},{"messageId":"56","fix":"57","desc":"58"},"suggestUnknown",{"range":"59","text":"60"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"59","text":"61"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[61,64],"unknown","never"]